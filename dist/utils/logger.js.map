{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/utils/logger.ts"],"names":[],"mappings":";;AAAA,+BAA+B;AAS/B,MAAa,MAAM;IAGjB;QAFiB,YAAO,GAAW,cAAO,CAAc,OAAO,CAAC,IAAK,CAAC,QAAQ,CAAC,CAAC;QAG9E,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,KAAK,SAAS,EAAE;YACvD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACtD;IACH,CAAC;IAEM,IAAI,CAAC,GAAG,IAAe;QAC5B,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC;IAEM,IAAI,CAAC,GAAG,IAAe;QAC5B,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC;IAEM,KAAK,CAAC,GAAG,IAAe;QAC7B,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC/B,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;IAEO,KAAK;QACX,MAAM,KAAK,GAAsB,IAAI,KAAK,EAAE,CAAC,KAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACzE,MAAM,SAAS,GAA4B,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,oDAAoD,CAAC,CAAC;QAEhH,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;YAChE,OAAO,EAAE,CAAC;SACX;QAED,MAAM,QAAQ,GAAW,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAW,SAAS,CAAC,CAAC,CAAC,CAAC;QAElC,OAAO,GAAG,QAAQ,IAAI,IAAI,EAAE,CAAC;IAC/B,CAAC;CACF;AArCD,wBAqCC;AAGY,QAAA,MAAM,GAAW,IAAI,MAAM,EAAE,CAAC","sourcesContent":["import { dirname } from 'path';\n\n// tslint:disable-next-line: no-any\nexport type Parameter = [any?, ...any[]];\n\n/* tslint:disable:no-console */\n/**\n * 로그 클래스\n */\nexport class Logger {\n  private readonly rootDir: string = dirname((<NodeModule>require.main).filename);\n\n  constructor() {\n    if (process.env.pm_id && process.env.name !== 'discord') {\n      this.rootDir = this.rootDir.replace('/dist', '/src');\n    }\n  }\n\n  public info(...args: Parameter): void {\n    args.push(`- ${this.trace()}`);\n    console.info.apply(console, args);\n  }\n\n  public warn(...args: Parameter): void {\n    args.push(`- ${this.trace()}`);\n    console.warn.apply(console, args);\n  }\n\n  public error(...args: Parameter): void {\n    args.push(`- ${this.trace()}`);\n    console.error.apply(console, args);\n  }\n\n  private trace(): string {\n    const lines: string[] = (<string>new Error().stack).split('\\n').slice(1);\n    const lineMatch: RegExpMatchArray | null = lines[2].match(/at (?:(.+)\\s+)?\\(?(?:(.+?):(\\d+):(\\d+)|([^)]+))\\)?/);\n\n    if (!lineMatch || lineMatch[2] === null || lineMatch[3] === null) {\n      return '';\n    }\n\n    const fileName: string = lineMatch[2].split(this.rootDir)[1];\n    const line: string = lineMatch[3];\n\n    return `${fileName}:${line}`;\n  }\n}\n/* tslint:enable:no-console */\n\nexport const logger: Logger = new Logger();\n"]}